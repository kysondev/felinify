
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?   @default("https://res.cloudinary.com/dyu7ogoqc/image/upload/v1754097644/odsjwixha8d48gfswujc.jpg")
  role          ROLE      @default(user)
  energy        Int       @default(10)
  usernameSet   Boolean   @default(false)
  stripeCustomerId String?
  createdAt     DateTime
  updatedAt     DateTime
  lastEnergyRefillAt    DateTime?   @default(now())
  sessions      Session[]
  accounts      Account[]
  twoFactorEnabled Boolean?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  totalStudyTime  Int @default(0)
  twofactors       TwoFactor[]
  decks           Deck[]
  flashcardPerformances FlashcardPerformance[]
  studySessions  StudySession[]
  userDeckProgress UserDeckProgress[]
  quizAccessTokens QuizAccessToken[]
  review Review[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

enum ROLE {
  user
  admin
}

model Subcription {
  id       String     @id @default(cuid())
  plan String
  referenceId String?
  stripeCustomerId String?
  stripeSubscriptionId String?
  status    String
  periodStart DateTime?
  periodEnd DateTime?
  cancelAtPeriodEnd Boolean?
  seats Int?
  trialStart DateTime?
  trialEnd DateTime?
  @@map("subscription")
}

model Deck {
  id        Int       @id
  name      String
  description String?
  imageUrl String?
  rating Float @default(0)
  studyCount Int @default(0)
  studyHour Int @default(0)
  visibility Visibility @default(public)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tag  Tag[]
  review Review[]
  flashcards Flashcard[]
  studySessions StudySession[]
  progress UserDeckProgress[]
  quizAccessTokens QuizAccessToken[]
  @@map("deck")
}

enum Visibility {
  public
  private
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deckId   Int
  deck Deck  @relation(fields: [deckId], references: [id], onDelete: Cascade)
  @@map("tag")
}

model Review {
  id       String    @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  description String?
  rating    Int @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deckId   Int
  deck Deck  @relation(fields: [deckId], references: [id], onDelete: Cascade)
  @@map("review")
}

model UserDeckProgress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId    Int
  mastery   Float    @default(0.0)
  completedSessions Int @default(0)
  challengeCompleted Int @default(0)
  lastStudied DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, deckId])
  @@map("userDeckProgress")
}

model Flashcard {
  id              String   @id @default(cuid())
  term            String
  definition      String
  termImageUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deck            Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId          Int
  performances    FlashcardPerformance[]
  @@map("flashcard")
}

model FlashcardPerformance {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  flashcard     Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId   String
  timesStudied  Int       @default(0)
  correctCount  Int       @default(0)
  incorrectCount Int      @default(0)
  lastStudied   DateTime?
  easeFactor    Float? @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("flashcardPerformance")
}

model StudySession {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  lengthInSeconds     Int?
  deckId     Int?
  deck       Deck?     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  CreatedAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("studySession")
}

model QuizAccessToken {
  id         String    @id @default(cuid())
  token      String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  deck       Deck      @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId     Int
  numQuestions Int
  used       Boolean   @default(false)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@map("quizAccessToken")
}

model SubscriptionEmail {
  id         String    @id @default(cuid())
  email      String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@map("subscriptionEmail")
}